pipeline {
    agent any

    environment {
        NODE_VERSION = "20.9.0."  // Set the Node.js version
        APP_NAME = "med-ai"
        CONTAINER_NAME = "jenkins-container"
        DOCKER_IMAGE = "jenkins/jenkins:latest"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "Cloning repository..."
                    checkout scm
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    dir('web/frontend') { // Corrected directory syntax
                        echo "Installing dependencies..."
                        bat 'npm install'
                    }
                }
            }
        }

        stage('Build Next.js App') {
            steps {
                script {
                    dir('web/frontend') { // Corrected directory syntax
                        echo "Building Next.js App..."
                        bat 'npm run build'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    dir('web/frontend') { // Ensuring tests run in the correct directory
                        echo "Running tests..."
                        bat 'npm test || echo "Tests failed, but continuing..."'
                    }
                }
            }
        }

        stage('Docker Build & Run') {
            steps {
                script {
                    echo "Building Docker Image..."
                    bat "docker build -t ${DOCKER_IMAGE} web/frontend" // Specify correct context

                    echo "Stopping old container (if running)..."
                    bat "docker stop ${CONTAINER_NAME} || ver && docker rm ${CONTAINER_NAME} || ver"

                    echo "Running New Container..."
                    bat "docker run -d -p 3000:3000 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}"
                }
            }
        }
    }

    post {
        success {
            echo "✅ Build and Deployment Successful!"
        }
        failure {
            echo "❌ Build or Deployment Failed!"
        }
    }
}
